---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Creación de Nuevo Tutor">
  <div class="space-y-6">
    <div>
      <h2 class="text-2xl font-bold text-custom-text dark:text-gray-50">Creación de Nuevo Tutor</h2>
      <p class="text-custom-text dark:text-gray-50 mt-2">Ingrese la información solicitada ( '*' OBLIGATORIA)</p>
    </div>
    <div class="bg-white dark:bg-custom-darkblue rounded-lg shadow-md p-6">
        <form id="newTutorForm" class="space-y-6">
            <div class="relative">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    DNI (*)
                </label>
                <input 
                type="number"
                id="tutorDNI"
                autocomplete="off"
                pattern="\d{8,}"
                class="w-32 max-sm:w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
                required>
                <p id="dniError" class="text-red-500 text-sm hidden">El DNI debe tener al menos 8 dígitos.</p>
            </div>
            <div class="relative">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Nombres (*)
                </label>
                <input 
                type="text"
                id="tutorNames"
                autocomplete="off"
                class="w-1/2 max-sm:w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
                required >
            </div>
            <div class="relative">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Apellidos (*)
                </label>
                <input 
                type="text"
                id="tutorLastName"
                autocomplete="off"
                class="w-1/2 max-sm:w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
                required >
            </div>
            <div class="relative">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Dirección (*)
                </label>
                <input 
                type="text"
                id="tutorAddress"
                autocomplete="off"
                class="w-1/2 max-sm:w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
                required >
            </div>
            <div class="relative">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Email (*)
                </label>
                <input 
                type="email"
                id="tutorEmail"
                autocomplete="off"
                class="w-1/2 max-sm:w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
                required >
            </div>

            <div class="flex justify-end mt-6">
                <button
                type="submit"
                id="saveButton"
                disabled
                class="px-6 py-2 bg-green-500 text-white rounded-md hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed">
                    Guardar Tutor
                </button>
                <button
                type="button"
                id="cancelButton"
                disabled
                class="cancel-btn ml-3 px-4 py-2 bg-red-500 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:opacity-90 transition-opacity">
                    Cancelar
                </button>
            </div>
        </form>
    </div>
    <!-- <AdminUsersSearch client:load /> -->
  </div>
<script>
  import { saveTutor } from '../../services/api.ts';
  let authData;

  const getAuthData = () => {
    try {
      const authData = localStorage.getItem('sie-auth-storage');
      if (authData) {
        return JSON.parse(authData).state;
      }
      return null;
    } catch (error) {
      console.error(error);
      return null
    }
  }

  try {
    authData = getAuthData();
    if (!authData?.token) {
      throw new Error('No hay token de autenticación');
    }
  } catch (error) {
    console.error(error);
  }

    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('newTutorForm') as HTMLFormElement;
      const saveButton = document.getElementById('saveButton') as HTMLButtonElement;
      const cancelButton = document.getElementById('cancelButton') as HTMLButtonElement;
      const inputs = form.querySelectorAll('input') as NodeListOf<HTMLInputElement>;
      const dniInput = document.getElementById('tutorDNI') as HTMLInputElement;
      const tutorNames = document.getElementById('tutorNames') as HTMLInputElement;
      const tutorLastName = document.getElementById('tutorLastName') as HTMLInputElement;
      const tutorAddress = document.getElementById('tutorAddress') as HTMLInputElement;
      const tutorEmail = document.getElementById('tutorEmail') as HTMLInputElement;
      const dniError = document.getElementById('dniError') as HTMLElement;

      const checkFormValidity = () => {
        const allFilled = Array.from(inputs).every(input => input.value.trim() !== '');
        const dniValid = dniInput.value.length >= 8;
        saveButton.disabled = !(allFilled && dniValid);
        dniError.classList.toggle('hidden', dniValid);
      };

      const enableCancelButton = () => {
        cancelButton.disabled = false;
      };

      inputs.forEach(input => {
        input.addEventListener('input', () => {
          checkFormValidity();
          enableCancelButton();
        });
      });

      form.addEventListener('submit', (e) => {
        e.preventDefault();
        // Aquí puedes agregar la lógica para enviar el formulario
        const tutor = {
          dni: dniInput.value,
          names: tutorNames.value,
          surnames: tutorLastName.value,
          address: tutorAddress.value,
          email: tutorEmail.value,
        };

        const saveTutorProccess = async (tutor, token) => {
          try {
            const res = await saveTutor(tutor, token);
            if (res.status === 201 || res.status === 200) {
              alert('Tutor guardado exitosamente');
              form.reset();
              window.location.href = '/admin/tutors';
            } else {
              throw new Error('Error al guardar tutor');
            }
          } catch (error) {
            console.error('Error details:', error);

            if (!(error.response?.data?.message === 'DNI ya existente en la base de datos')){
              alert('Error al guardar el tutor. Intente nuevamente mas tarde.')}

            if ((error.response?.data?.message === 'DNI ya existente en la base de datos')){
              alert('Error al guardar el tutor. DNI ya existente en la base de datos')}

          }
        };
        
        saveTutorProccess(tutor, authData?.token);

      });

      const cancelEdit = () => {
        form.reset();
        saveButton.disabled = true;
        cancelButton.disabled = true;
        dniError.classList.add('hidden');
      };

      cancelButton.addEventListener('click', cancelEdit);

    });

</script>

</DashboardLayout>